// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentBotCore.Model;

namespace StudentBotCore.Migrations
{
    [DbContext(typeof(StuDbContext))]
    partial class StuDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("StudentBotCore.Model.Category", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("ChatId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StudentBotCore.Model.Event", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("CategoryId")
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("StartUtcDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<ulong?>("TagId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TagId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("StudentBotCore.Model.EventOrganizer", b =>
                {
                    b.Property<ulong>("EventId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("PersonId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("EventId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("EventOrganizers");
                });

            modelBuilder.Entity("StudentBotCore.Model.EventParticipant", b =>
                {
                    b.Property<ulong>("EventId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("PersonId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("EventId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("EventParticipants");
                });

            modelBuilder.Entity("StudentBotCore.Model.EveryDayRegularEventNotification", b =>
                {
                    b.Property<ulong>("ChatId")
                        .HasColumnType("bigint unsigned");

                    b.Property<TimeSpan>("StartUtcTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("Scope")
                        .HasColumnType("time(6)");

                    b.HasKey("ChatId", "StartUtcTime");

                    b.ToTable("EveryDayRegularEventNotifications");
                });

            modelBuilder.Entity("StudentBotCore.Model.EveryDayRegularSchedule", b =>
                {
                    b.Property<ulong>("ChatId")
                        .HasColumnType("bigint unsigned");

                    b.Property<TimeSpan>("StartUtcTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.HasKey("ChatId", "StartUtcTime", "Duration");

                    b.ToTable("EveryDayRegularSchedules");
                });

            modelBuilder.Entity("StudentBotCore.Model.Person", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(320) CHARACTER SET utf8mb4")
                        .HasMaxLength(320);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<string>("Patronymic")
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.Property<ulong?>("VkUserId")
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("VkUserId")
                        .IsUnique();

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("StudentBotCore.Model.Tag", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1ul,
                            Name = "Лекция"
                        },
                        new
                        {
                            Id = 2ul,
                            Name = "Практика"
                        },
                        new
                        {
                            Id = 3ul,
                            Name = "Лабораторная"
                        },
                        new
                        {
                            Id = 4ul,
                            Name = "Факультатив"
                        },
                        new
                        {
                            Id = 5ul,
                            Name = "Урок"
                        },
                        new
                        {
                            Id = 6ul,
                            Name = "Экзамен"
                        },
                        new
                        {
                            Id = 7ul,
                            Name = "Консультация"
                        },
                        new
                        {
                            Id = 8ul,
                            Name = "Другое"
                        });
                });

            modelBuilder.Entity("StudentBotCore.Model.VkChat", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.Property<TimeSpan>("TimeOffset")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.ToTable("VkChats");
                });

            modelBuilder.Entity("StudentBotCore.Model.VkChatAdmin", b =>
                {
                    b.Property<ulong>("ChatId")
                        .HasColumnType("bigint unsigned");

                    b.Property<ulong>("VkUserId")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ChatId", "VkUserId");

                    b.HasIndex("VkUserId");

                    b.ToTable("VkChatAdmins");
                });

            modelBuilder.Entity("StudentBotCore.Model.VkUser", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned");

                    b.HasKey("Id");

                    b.ToTable("VkUsers");
                });

            modelBuilder.Entity("StudentBotCore.Model.Category", b =>
                {
                    b.HasOne("StudentBotCore.Model.VkChat", "Chat")
                        .WithMany("EventCategories")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentBotCore.Model.Event", b =>
                {
                    b.HasOne("StudentBotCore.Model.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("StudentBotCore.Model.Tag", "Tag")
                        .WithMany("Events")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("StudentBotCore.Model.EventOrganizer", b =>
                {
                    b.HasOne("StudentBotCore.Model.Event", "Event")
                        .WithMany("Organizers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentBotCore.Model.Person", "Person")
                        .WithMany("OrganizerInEvents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentBotCore.Model.EventParticipant", b =>
                {
                    b.HasOne("StudentBotCore.Model.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentBotCore.Model.Person", "Person")
                        .WithMany("ParticipantInEvents")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentBotCore.Model.EveryDayRegularEventNotification", b =>
                {
                    b.HasOne("StudentBotCore.Model.VkChat", "Chat")
                        .WithMany("Notifications")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentBotCore.Model.EveryDayRegularSchedule", b =>
                {
                    b.HasOne("StudentBotCore.Model.VkChat", "Chat")
                        .WithMany("ScheduleOrders")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentBotCore.Model.Person", b =>
                {
                    b.HasOne("StudentBotCore.Model.VkUser", "VkUser")
                        .WithOne("Person")
                        .HasForeignKey("StudentBotCore.Model.Person", "VkUserId");
                });

            modelBuilder.Entity("StudentBotCore.Model.VkChatAdmin", b =>
                {
                    b.HasOne("StudentBotCore.Model.VkChat", "Chat")
                        .WithMany("Admins")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentBotCore.Model.VkUser", "VkUser")
                        .WithMany("AdminInChats")
                        .HasForeignKey("VkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
